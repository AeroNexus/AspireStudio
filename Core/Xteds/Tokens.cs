//using System;

namespace Aspire.Core.xTEDS
{
	public struct Token
	{
		public string name;
		public StructuredQuery.sq op;
		public Token(string _name, StructuredQuery.sq _op)
		{
			name = _name;
			op = _op;
		}
	}
	public partial class StructuredQuery
	{
		public static Token[] Tokens = new Token[]{
			new Token("!=",sq.NotEqual),
			new Token("<",sq.LessThan),
			new Token("<=",sq.LessThanEqual),
			new Token("=",sq.Equals),
			new Token(">",sq.GreaterThan),
			new Token(">=",sq.GreaterThanEqual),
			new Token("Application",sq.Application),
			new Token("Coef",sq.Coef),
			new Token("Command",sq.Command),
			new Token("CommandMsg",sq.CommandMsg),
			new Token("Component",sq.Component),
			new Token("Contains",sq.Contains),
			new Token("Curve",sq.Curve),
			new Token("DataMsg",sq.DataMsg),
			new Token("DataReplyMsg",sq.DataReplyMsg),
			new Token("Device",sq.Device),
			new Token("Drange",sq.Drange),
			new Token("EndsWith",sq.EndsWith),
			new Token("FaultMsg",sq.FaultMsg),
			new Token("Interface",sq.Interface),
			new Token("Location",sq.Location),
			new Token("Message",sq.Message),
			new Token("MessageSpec",sq.MessageSpec),
			new Token("Notification",sq.Notification),
			new Token("Option",sq.Option),
			new Token("Orientation",sq.Orientation),
			new Token("Qualifier",sq.Qualifier),
			new Token("Request",sq.Request),
			new Token("StartsWith",sq.StartsWith),
			new Token("Variable",sq.Variable),
			new Token("VariableRef",sq.VariableRef),
			new Token("Within",sq.Within),
			new Token("[deliver]",sq.Deliver),
			new Token("[elementName]",sq.ElementName),
			new Token("[end]",sq.End),
			new Token("[matchLocation]",sq.MatchLocation),
			new Token("[noCase]",sq.NoCase),
			new Token("[peek]",sq.Peek),
			new Token("[pop]",sq.Pop),
			new Token("[push]",sq.Push),
			new Token("[string]",sq.String),
			new Token("[up]",sq.Up),
			new Token("accuracy",sq.Accuracy),
			new Token("alarm",sq.Alarm),
			new Token("angle",sq.Angle),
			new Token("architecture",sq.Architecture),
			new Token("axis",sq.Axis),
			new Token("calDueDate",sq.CalDueDate),
			new Token("calibrationDate",sq.CalibrationDate),
			new Token("compUid",sq.CompUid),
			new Token("defaultValue",sq.DefaultValue),
			new Token("description",sq.Description),
			new Token("directionXyz",sq.DirectionXYZ),
			new Token("electricalOutput",sq.ElectricalOutput),
			new Token("exponent",sq.Exponent),
			new Token("extends",sq.Extends),
			new Token("format",sq.Format),
			new Token("id",sq.Id),
			new Token("invalidValue",sq.InvalidValue),
		//	new Token("ipPort",sq.IpPort),
			new Token("kind",sq.Kind),
			new Token("length",sq.Length),
			new Token("lengthStr",sq.LengthStr),
			new Token("manufacturerId",sq.ManufacturerId),
			new Token("measurementRange",sq.MeasurementRange),
			new Token("memoryMinimum",sq.MemoryMinimum),
			new Token("modelId",sq.ModelId),
			new Token("msgArrival",sq.MsgArrival),
			new Token("msgId",sq.MsgId),
			new Token("msgRate",sq.MsgRate),
			new Token("name",sq.Name),
			new Token("operatingSystem",sq.OperatingSystem),
			new Token("pathForAssembly",sq.PathForAssembly),
			new Token("pathOnSpacecraft",sq.PathOnSpacecraft),
			new Token("powerRequirements",sq.PowerRequirements),
			new Token("precision",sq.Precision),
			new Token("qualityFactor",sq.QualityFactor),
			new Token("rHigh",sq.RHigh),
			new Token("rLow",sq.RLow),
			new Token("rangeMax",sq.RangeMax),
			new Token("rangeMin",sq.RangeMin),
			new Token("referenceFrequency",sq.ReferenceFrequency),
			new Token("referenceTemperature",sq.ReferenceTemperature),
			new Token("scaleFactor",sq.ScaleFactor),
			new Token("scaleUnits",sq.ScaleUnits),
			new Token("scope",sq.Scope),
			new Token("sensitivityAtReference",sq.SensitivityAtReference),
			new Token("serialNumber",sq.SerialNumber),
			new Token("temperatureCoefficient",sq.TemperatureCoefficient),
			new Token("units",sq.Units),
			new Token("value",sq.Value),
			new Token("version",sq.Version),
			new Token("versionLetter",sq.VersionLetter),
			new Token("x",sq.X),
			new Token("xTEDS",sq.Xteds),
			new Token("xtedsUid",sq.XtedsUid),
			new Token("y",sq.Y),
			new Token("yHigh",sq.YHgh),
			new Token("yLow",sq.YLow),
			new Token("z",sq.Z)
		};
	}
}
